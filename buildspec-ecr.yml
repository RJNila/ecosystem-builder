version: 0.2

env:
  variables:
    AWS_REGION: eu-west-1                  # Region for ECR & AWS CLI calls
    ECR_REPO_NAME: ecosystem-builder       # Your ECR repo name
    PYTHONUNBUFFERED: "1"                  # Nicer Python logs in CI

phases:
  install:                                 # 1) Prepare tools for optional tests
    commands:
      - pip install --no-cache-dir -r requirements.txt || true
      - pip install pytest || true

  pre_build:                               # 2) Login to ECR + decide image tag + (optional) tests
    commands:
      - echo "Logging into ECR..."
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - |
        # Debug helpers: show aws and docker versions (no secrets printed)
        aws --version || true
        docker --version || true

        # Use AWS CLI v2 preferred command if available, otherwise fall back to v1 behavior.
        if aws ecr get-login-password --region "$AWS_REGION" >/dev/null 2>&1; then
          if ! aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"; then
            echo "ERROR: docker login to ECR failed (aws ecr get-login-password returned non-zero or docker login failed)"
            exit 1
          fi
        else
          # Older AWS CLI (v1) provides `get-login`. Evaluate the returned docker login command.
          if ! eval "$(aws ecr get-login --no-include-email --region \"$AWS_REGION\")"; then
            echo "ERROR: aws ecr get-login fallback failed"
            exit 1
          fi
        fi

        # Ensure the ECR repository exists before pushing (helpful for fresh accounts/repos)
        if ! aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
          echo "ECR repository $ECR_REPO_NAME not found, attempting to create it..."
          aws ecr create-repository --repository-name "$ECR_REPO_NAME" --region "$AWS_REGION" || true
        fi

        # --- Extra debugging to diagnose docker login/push issues ---
        echo "--- DEBUG: AWS caller identity ---"
        aws sts get-caller-identity || true

        echo "--- DEBUG: ECR authorization token (text) ---"
        aws ecr get-authorization-token --region "$AWS_REGION" --output text || true

        echo "--- DEBUG: check if docker is available ---"
        docker --version || true
        docker info || true

        echo "--- DEBUG: write ecr password to /tmp/ecr_pw (password NOT printed) ---"
        if ! aws ecr get-login-password --region "$AWS_REGION" > /tmp/ecr_pw 2>/tmp/ecr_pw_err; then
          echo "ERROR: get-login-password failed, contents of /tmp/ecr_pw_err:"; cat /tmp/ecr_pw_err || true
          exit 1
        fi

        echo "pw bytes: $(wc -c < /tmp/ecr_pw)"

        echo "--- DEBUG: attempt docker login and capture output ---"
        if ! cat /tmp/ecr_pw | docker login --username AWS --password-stdin "$ECR_REGISTRY" > /tmp/docker_login_out 2>&1; then
          echo "ERROR: docker login failed, output:"; cat /tmp/docker_login_out || true
          exit 1
        fi
        echo "docker login output:"; cat /tmp/docker_login_out || true
        echo "--- END DEBUG ---"
      - IMAGE_URI=$ECR_REGISTRY/$ECR_REPO_NAME:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - echo "IMAGE_URI=$IMAGE_URI"
      - if [ -d tests ]; then python -m pytest -q || true; else echo "No tests yet"; fi

  build:                                   # 3) Build the Docker image from your Dockerfile
    commands:
      - echo "Building Docker image..."
      - docker build -t $IMAGE_URI .

  post_build:                              # 4) Push the image & publish its URI for downstream steps
    commands:
      - echo "Pushing image..."
      - docker push $IMAGE_URI
      - printf '{"image":"%s"}' "$IMAGE_URI" > image.json

artifacts:                                 # 5) Hand an artifact to the next stage (optional)
  files:
    - image.json
